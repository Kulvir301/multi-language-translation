#summary Provides full documentation on how to use the script and deploy it on your website - including examples, further information, and Frequently Asked Questions...
#labels Featured,Implementation,Deployment,Support

=Multi-Language Translation Script - Documentation=

==Contents==

<wiki:toc max_depth="2" />

==Introduction==

The Multi-Language Translation script automatically translates a web-page (containing text in more than one language) into any single language requested by the user. This can be particularly useful for sites involving a lot of user-generated content (which might have originally been written by a number of users who speak different native languages) - e.g. blogs, forums, or other community sites. The script harnesses the [http://code.google.com/intl/en/apis/ajaxlanguage/ Google AJAX Language API] to perform translation and language detection.

This page provides full instructions on how to use the script and deploy it on your website, providing examples where necessary. It also attempts to answer any additional questions you may have, as well as to outline ways you can support the project if you wish to do so. All feedback - both on this documentation and on the script itself - would be much appreciated.

==Deployment and Usage Instructions==

This section explains how to deploy the script on your website. Before following these instructions, please first [http://code.google.com/p/multi-language-translation/downloads/list download] the latest script release, and extract all files from the archive into a new folder on your computer.

===Step 1:===
 
Firstly, you need to include the following 3 HTML lines somewhere within all web-pages that use the script:

{{{
<script type="text/javascript" src="http://www.google.com/jsapi"></script>
<script type="text/javascript" src="translate.js"></script>
<div id="languagelist"></div>
}}}

If you use a _Content Management System_ to maintain your site (either a generic one such as [http://www.drupal.org Drupal], or a bespoke one), you could place this code in a _Block_, _Widget_, or top banner; so that the script runs on every page on your site. If your site is made up of static HTML pages however, you will need to repeat this step for all pages you wish the translation functionality to work on.

_Note:_ If you wish, you could include the first 2 lines between the {{{<head>}}} tags of all pages on your site instead. This is down to personal preference, but it should work fine in both cases.

Please ensure that if you intend to upload the script to a different folder from where your web-pages are located, you update the {{{src}}} value of line 2 to the location of your script (e.g {{{src="scripts/translate.js"}}} or {{{src="http://www.example.com/scripts/translate.js"}}})

When a page on your site loads, the script will create a listbox containing all the languages that your site can currently be translated into (note: each language should be auto-translated to allow native speakers to easily find their language; and the list will show additional languages automatically, as and when Google supports them). If the user changes the language, the specified content (see [#Step_2: Step 2]) will be translated into that language. The script will also remember the language they pick; so that if they visit the page again later, or visit another page on your site which includes the translation functionality, the relevant page can be (re)translated automatically. There is also an _Original Languages_ option at the top of the listbox, which will return the user to the original untranslated site (this is also the default option if they have not yet chosen a language). 

Note: if the user has !JavaScript disabled, the listbox will not appear (which does prevent further confusion from arising, as it prevents such users from trying to change the language - which would in any case not work unless !JavaScript was enabled). If you wish, you can display a message to the user between the {{{<div>}}} tags - e.g.

{{{
<div id="languagelist">Enable JavaScript!</div>
}}}

This message will not be shown unless !JavaScript is disabled or not supported by the user's browser...

Directly below the listbox containing the languages, a _Powered By Google_ attribution message will be shown. This is a requirement of the [http://code.google.com/intl/en/apis/ajaxlanguage/terms.html Google AJAX Language API Terms of Use].

===Step 2:===

Open the file _translate.js_. You need to make some configurations to the top of this script file to enable it to work with your website:

====Step 2(a):====

Specify the _Base Language_ for your website. This is the language the site was originally written in, and is normally the language used for all regions which appear on every page and do not change throughout the site - e.g. navigational elements such as links to other parts of the website. The base language should be entered in the form of a 2 character language code - you can view a [http://code.google.com/intl/en/apis/ajaxlanguage/documentation/reference.html#LangNameArray Complete List of Available Language Codes] here (note that you do also need to check if [http://code.google.com/intl/en/apis/ajaxlanguage/documentation/#SupportedPairs translation is supported] from the applicable language).

For example, if the base language is English, you should configure the script to read as follows:  

{{{
var GL_baseLang = "en";
}}}

====Step 2(b):====

A typical modern website is divided into a number of regions - e.g. a top banner, sidebar(s), a content area (which is usually divided into further regions - such as individual blog post entries), and a footer. These regions are usually enclosed by {{{<div>}}} _html elements/tags_ - or alternatively by {{{<h1>}}},{{{<ul>}}},{{{<p>}}} elements etc. Specific elements on a page can be identified through the usage of element _IDs_ or _Class Names_ - e.g. {{{<div class="region1">}}}. 

*It is important to remember when creating a new site that an ID can only be used to identify one single element on any one webpage - if an element is intended to appear multiple times on a page (e.g. to surround blog post entries), Class Names should be used instead!*

For the script to work correctly, you need to specify all regions on each page of your site that you wish to have translated - Why do I need to do this?. This is achieved by identifying the IDs and Class Names of all elements that enclose these regions. Please note that if any regions are *not* enclosed by an element which can be identified by a Class Name or an ID, you would unfortunately have to modify your theme / site code to support this - this should not be needed in a lot of cases however, and any changes that _are_ required should be very minor.

Firstly, all applicable element IDs must be specified. If you have some existing knowledge of !JavaScript, you will see that this is achieved by storing them in an Array, made up of a number of sub-Arrays (do not worry if you do not understand this though - simply follow the instructions below).

*i)* If an element encloses content that is written in the _[#Step_2(a): Base Language]_ of the site, you need to specify the element by using the following format (_exactly as shown_):

{{{
	["elementID"],
}}}

... where _elementID_ is the ID of the element enclosing the relevant region.

*ii)* If an element encloses content written in a *known* language which is *different* from the base language, specify the element using the following format:

{{{
	["elementID", "fr"],
}}}

... where _fr_ is the [http://code.google.com/intl/en/apis/ajaxlanguage/documentation/reference.html#LangNameArray language code] for the source language the contents are written in.

*iii)* If the element encloses content written in an *unknown* language (which therefore needs to be detected automatically to ensure correct translation when the script runs), use the format:

{{{
	["elementID", ""],
}}}

*iv)* The script can also optionally append some text to the bottom of a specified element which indicates the source language of the enclosed region. If you wish to enable this for an element, use the format:

{{{
	["elementID", "fr", true],
}}}

... this will add the line 

_Automatic translation from French: Powered By Google - View Source Text(+)_ 

to the bottom of the relevant content. Note that this option _will_ work if a source language is manually specified, _or_ if it has been detected automatically - but _*not*_ if the Base Language format above was used (you can get around this limitation by manually specifying the Base Language as the Source Language (i.e. use {{{["elementID", "en", true],}}} instead of {{{["elementID", true],}}} assuming English is the Base Language).).

If the user clicks on the _View Source Text (+)_ link shown on part of the line, the original untranslated text for the current region will be shown below it (highlighted in a green font). The user can then click on the link again to hide this content if they wish. This functionality is only available if the webmaster has chosen to display the source language below a region - it is assumed that the user would not want to view the source text of less 'important' regions such as navigational elements.

*Putting It All Together:* A full example is shown below of the correct syntax to use when specifying the IDs of elements enclosing regions to be translated:

{{{
var GL_classIds = [
	["navigation"],
	["left_sidebar", ""],
	["right_sidebar", "fr", true],
	["footer"],
];
}}}

This will translate the regions enclosed by the 4 elements identified with the IDs shown above. The contents of element {{{<div id="navigation">}}} are written in the Base Language; the {{{left_sidebar}}} element contents will be auto-detected during translation; the {{{right_sidebar}}} element contents are written in French (and a line revealing this will be displayed at the bottom); and finally the {{{footer}}} element contents are written in the Base Language. The contents of each of these elements will be translated separately, into the language requested by the user. Any elements specified above which do *not* appear on any individual page including the script will be ignored and skipped out - so feel free to include such elements if required by your site...

The example above will work with the _example.htm_ file distributed with the script - so you will be able to see how the page interacts with this in real life.

====Step 2(c):====

This step is very similar to [#Step_2(b): Step 2(b)] - you now need to specify the Class Names of all elements enclosing regions to translate. The Class Names should be specified using exactly the same format as for the element IDs (see [#Step_2(b): Step 2(b)]). As noted previously, Class Names may be used to identify multiple elements on any one page. Please bear in mind that the script expects the contents of any one element to be in a single language, but another element with the same class name can contain text in a completely different language. E.g. a blog may contain multiple entries, each written in a single language, but some entries may be written in different languages from others.

When the script runs, the script will search for each occurrence of each specified element class name (if present - any specified elements not present will be skipped), and translate the contents of each separately (automatically detecting the language of the applicable region if necessary).

A full example is shown below of the correct syntax to use when specifying the Class Names of elements enclosing regions to be translated:

{{{
var GL_classNames = [
	["entry_baselang"],
	["entry_french", "fr"],
	["entry", "", true],
	["quotes", "de", true],
];
}}}

This will translate all regions enclosed by any of the 4 elements identified with the Class Names shown above. The contents of element {{{<div class="entry_baselang">}}} are always written in the Base Language; the {{{entry_french}}} element contents are always written in French; the language of each individual region enclosed by an {{{entry}}} element class name will be detected automatically during translation (and a line of text containing the detected language will be displayed at the bottom of each applicable element); and finally the {{{quotes}}} element contents are always written in German (and a line showing this will be displayed at the bottom of each applicable element). The example shown here also works with the _example.htm_ file distributed with the script.

No further changes to the script are necessary (unless you want to alter the functionality); so save and close the file.

===Step 3:===

Upload the file _translate.js_ (as well as any web-pages or files on your site that have been changed) to your server. If the above instructions have successfully been followed, the script should work in the manner expected. Your work is now complete!

==Further Examples==

The archive containing the latest release of the script includes a file entitled _example.htm_ which shows the functionality in action. This is a very simple working example, but should help you understand how to configure and use the script. Please ensure that you have extracted both _example.htm_ and _translate.js_ from the archive into a new folder before opening the example (if you do not do this, it will not work properly). If you view the source of _example.htm_ (Right Click on the page and choose _View Source_ in Internet Explorer, or _View Page Source_ in Firefox) you will see some additional comments describing how the script interacts with the page.

We are always very interested in how the script is being used. If you have deployed or adapted it for your site, please consider providing a link to it in a new comment below this page - this would be very useful both to offer additional support for new script users, as well as to provide further "case studies" of successful implementations. Many thanks!

Additional examples will be posted on this page in the near future...

==Script Licence==
The script as a whole is released as Open Source under the [http://www.opensource.org/licenses/mit-license.php MIT License]. This essentially allows you to use or adapt it for any purpose; however no warranty is provided if you choose to do so.

Please note however that portions directly interact with (_Invoke_) functionality of the [http://code.google.com/intl/en/apis/ajaxlanguage/ Google AJAX Language API]. Google has not released this functionality under an Open Source licence; instead it is provided with the understanding that all usage should be in accordance with the [http://code.google.com/intl/en/apis/ajaxlanguage/terms.html Google AJAX API Terms of Use]. For details of all relevant functionality invoked by this script, please see the [http://code.google.com/intl/en/apis/ajaxlanguage/documentation/reference.html Translation API Class Reference].

Therefore, whilst you are free to use or adapt the script for any purpose, *you also assume full responsibility for ensuring that your usage of this script (and/or any derivatives that continue to utilise the [http://code.google.com/intl/en/apis/ajaxlanguage/ Google AJAX Language API]) on your website is fully in compliance with these [http://code.google.com/intl/en/apis/ajaxlanguage/terms.html Terms of Use].* 

The developer(s) of the script are in no way affiliated with Google, and this project is run completely independently from them.

=FAQs and Further Information=

==What Things Do I Need to Use and/or Deploy This Script?==

===Standard Users:===

 * A reasonably modern browser. This script has been tested successfully on the following browsers:
  * Internet Explorer
  * Mozilla Firefox
  * Safari
  * Google Chrome
  * Opera
 * !JavaScript must be enabled and supported by the browser
 * The browser must be able to accept cookies for your site if the current language is to be remembered when the user next visits

===Website Maintainers and Developers:===
 * A website. Note: this script should work on most modern sites. You do need to ensure that the site is coded in such a way that distinct regions of each page (e.g. headers, sidebars, content areas in separate languages, etc) are enclosed by HTML elements (e.g. {{{<div>}}} tags) that can be identified using IDs and/or class names - which should already be the case for the majority of sites!
 * Access to the server that the site is located on
 * A text editor (e.g. Windows Notepad)
 * Some basic familiarity with HTML and !JavaScript would be helpful